// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esxi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualSwitch struct {
	pulumi.CustomResourceState

	// Forged transmits (true=Accept/false=Reject).
	ForgedTransmits pulumi.BoolPtrOutput `pulumi:"forgedTransmits"`
	// Virtual Switch Link Discovery Mode.
	LinkDiscoveryMode pulumi.StringPtrOutput `pulumi:"linkDiscoveryMode"`
	// MAC address changes (true=Accept/false=Reject).
	MacChanges pulumi.BoolPtrOutput `pulumi:"macChanges"`
	// Virtual Switch mtu. (1280-9000)
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// Virtual Switch name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Virtual Switch number of ports. (1-4096)
	Ports pulumi.IntPtrOutput `pulumi:"ports"`
	// Promiscuous mode (true=Accept/false=Reject).
	PromiscuousMode pulumi.BoolPtrOutput `pulumi:"promiscuousMode"`
	// Uplink configuration.
	Uplinks UplinkArrayOutput `pulumi:"uplinks"`
}

// NewVirtualSwitch registers a new resource with the given unique name, arguments, and options.
func NewVirtualSwitch(ctx *pulumi.Context,
	name string, args *VirtualSwitchArgs, opts ...pulumi.ResourceOption) (*VirtualSwitch, error) {
	if args == nil {
		args = &VirtualSwitchArgs{}
	}

	var resource VirtualSwitch
	err := ctx.RegisterResource("esxi-native:index:VirtualSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualSwitch gets an existing VirtualSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualSwitchState, opts ...pulumi.ResourceOption) (*VirtualSwitch, error) {
	var resource VirtualSwitch
	err := ctx.ReadResource("esxi-native:index:VirtualSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualSwitch resources.
type virtualSwitchState struct {
}

type VirtualSwitchState struct {
}

func (VirtualSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualSwitchState)(nil)).Elem()
}

type virtualSwitchArgs struct {
	// Forged transmits (true=Accept/false=Reject).
	ForgedTransmits *bool `pulumi:"forgedTransmits"`
	// Virtual Switch Link Discovery Mode.
	LinkDiscoveryMode *string `pulumi:"linkDiscoveryMode"`
	// MAC address changes (true=Accept/false=Reject).
	MacChanges *bool `pulumi:"macChanges"`
	// Virtual Switch mtu. (1280-9000)
	Mtu *int `pulumi:"mtu"`
	// Virtual Switch name.
	Name *string `pulumi:"name"`
	// Virtual Switch number of ports. (1-4096)
	Ports *int `pulumi:"ports"`
	// Promiscuous mode (true=Accept/false=Reject).
	PromiscuousMode *bool `pulumi:"promiscuousMode"`
	// Uplink configuration.
	Uplinks []Uplink `pulumi:"uplinks"`
}

// The set of arguments for constructing a VirtualSwitch resource.
type VirtualSwitchArgs struct {
	// Forged transmits (true=Accept/false=Reject).
	ForgedTransmits pulumi.BoolPtrInput
	// Virtual Switch Link Discovery Mode.
	LinkDiscoveryMode pulumi.StringPtrInput
	// MAC address changes (true=Accept/false=Reject).
	MacChanges pulumi.BoolPtrInput
	// Virtual Switch mtu. (1280-9000)
	Mtu pulumi.IntPtrInput
	// Virtual Switch name.
	Name pulumi.StringPtrInput
	// Virtual Switch number of ports. (1-4096)
	Ports pulumi.IntPtrInput
	// Promiscuous mode (true=Accept/false=Reject).
	PromiscuousMode pulumi.BoolPtrInput
	// Uplink configuration.
	Uplinks UplinkArrayInput
}

func (VirtualSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualSwitchArgs)(nil)).Elem()
}

type VirtualSwitchInput interface {
	pulumi.Input

	ToVirtualSwitchOutput() VirtualSwitchOutput
	ToVirtualSwitchOutputWithContext(ctx context.Context) VirtualSwitchOutput
}

func (*VirtualSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualSwitch)(nil)).Elem()
}

func (i *VirtualSwitch) ToVirtualSwitchOutput() VirtualSwitchOutput {
	return i.ToVirtualSwitchOutputWithContext(context.Background())
}

func (i *VirtualSwitch) ToVirtualSwitchOutputWithContext(ctx context.Context) VirtualSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualSwitchOutput)
}

// VirtualSwitchArrayInput is an input type that accepts VirtualSwitchArray and VirtualSwitchArrayOutput values.
// You can construct a concrete instance of `VirtualSwitchArrayInput` via:
//
//          VirtualSwitchArray{ VirtualSwitchArgs{...} }
type VirtualSwitchArrayInput interface {
	pulumi.Input

	ToVirtualSwitchArrayOutput() VirtualSwitchArrayOutput
	ToVirtualSwitchArrayOutputWithContext(context.Context) VirtualSwitchArrayOutput
}

type VirtualSwitchArray []VirtualSwitchInput

func (VirtualSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualSwitch)(nil)).Elem()
}

func (i VirtualSwitchArray) ToVirtualSwitchArrayOutput() VirtualSwitchArrayOutput {
	return i.ToVirtualSwitchArrayOutputWithContext(context.Background())
}

func (i VirtualSwitchArray) ToVirtualSwitchArrayOutputWithContext(ctx context.Context) VirtualSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualSwitchArrayOutput)
}

// VirtualSwitchMapInput is an input type that accepts VirtualSwitchMap and VirtualSwitchMapOutput values.
// You can construct a concrete instance of `VirtualSwitchMapInput` via:
//
//          VirtualSwitchMap{ "key": VirtualSwitchArgs{...} }
type VirtualSwitchMapInput interface {
	pulumi.Input

	ToVirtualSwitchMapOutput() VirtualSwitchMapOutput
	ToVirtualSwitchMapOutputWithContext(context.Context) VirtualSwitchMapOutput
}

type VirtualSwitchMap map[string]VirtualSwitchInput

func (VirtualSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualSwitch)(nil)).Elem()
}

func (i VirtualSwitchMap) ToVirtualSwitchMapOutput() VirtualSwitchMapOutput {
	return i.ToVirtualSwitchMapOutputWithContext(context.Background())
}

func (i VirtualSwitchMap) ToVirtualSwitchMapOutputWithContext(ctx context.Context) VirtualSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualSwitchMapOutput)
}

type VirtualSwitchOutput struct{ *pulumi.OutputState }

func (VirtualSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualSwitch)(nil)).Elem()
}

func (o VirtualSwitchOutput) ToVirtualSwitchOutput() VirtualSwitchOutput {
	return o
}

func (o VirtualSwitchOutput) ToVirtualSwitchOutputWithContext(ctx context.Context) VirtualSwitchOutput {
	return o
}

// Forged transmits (true=Accept/false=Reject).
func (o VirtualSwitchOutput) ForgedTransmits() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.BoolPtrOutput { return v.ForgedTransmits }).(pulumi.BoolPtrOutput)
}

// Virtual Switch Link Discovery Mode.
func (o VirtualSwitchOutput) LinkDiscoveryMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.StringPtrOutput { return v.LinkDiscoveryMode }).(pulumi.StringPtrOutput)
}

// MAC address changes (true=Accept/false=Reject).
func (o VirtualSwitchOutput) MacChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.BoolPtrOutput { return v.MacChanges }).(pulumi.BoolPtrOutput)
}

// Virtual Switch mtu. (1280-9000)
func (o VirtualSwitchOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Virtual Switch name.
func (o VirtualSwitchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Virtual Switch number of ports. (1-4096)
func (o VirtualSwitchOutput) Ports() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.IntPtrOutput { return v.Ports }).(pulumi.IntPtrOutput)
}

// Promiscuous mode (true=Accept/false=Reject).
func (o VirtualSwitchOutput) PromiscuousMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualSwitch) pulumi.BoolPtrOutput { return v.PromiscuousMode }).(pulumi.BoolPtrOutput)
}

// Uplink configuration.
func (o VirtualSwitchOutput) Uplinks() UplinkArrayOutput {
	return o.ApplyT(func(v *VirtualSwitch) UplinkArrayOutput { return v.Uplinks }).(UplinkArrayOutput)
}

type VirtualSwitchArrayOutput struct{ *pulumi.OutputState }

func (VirtualSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualSwitch)(nil)).Elem()
}

func (o VirtualSwitchArrayOutput) ToVirtualSwitchArrayOutput() VirtualSwitchArrayOutput {
	return o
}

func (o VirtualSwitchArrayOutput) ToVirtualSwitchArrayOutputWithContext(ctx context.Context) VirtualSwitchArrayOutput {
	return o
}

func (o VirtualSwitchArrayOutput) Index(i pulumi.IntInput) VirtualSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualSwitch {
		return vs[0].([]*VirtualSwitch)[vs[1].(int)]
	}).(VirtualSwitchOutput)
}

type VirtualSwitchMapOutput struct{ *pulumi.OutputState }

func (VirtualSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualSwitch)(nil)).Elem()
}

func (o VirtualSwitchMapOutput) ToVirtualSwitchMapOutput() VirtualSwitchMapOutput {
	return o
}

func (o VirtualSwitchMapOutput) ToVirtualSwitchMapOutputWithContext(ctx context.Context) VirtualSwitchMapOutput {
	return o
}

func (o VirtualSwitchMapOutput) MapIndex(k pulumi.StringInput) VirtualSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualSwitch {
		return vs[0].(map[string]*VirtualSwitch)[vs[1].(string)]
	}).(VirtualSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualSwitchInput)(nil)).Elem(), &VirtualSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualSwitchArrayInput)(nil)).Elem(), VirtualSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualSwitchMapInput)(nil)).Elem(), VirtualSwitchMap{})
	pulumi.RegisterOutputType(VirtualSwitchOutput{})
	pulumi.RegisterOutputType(VirtualSwitchArrayOutput{})
	pulumi.RegisterOutputType(VirtualSwitchMapOutput{})
}
