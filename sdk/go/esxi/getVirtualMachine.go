// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esxi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-esxi-native/sdk/v3/go/esxi/internal"
)

func LookupVirtualMachine(ctx *pulumi.Context, args *LookupVirtualMachineArgs, opts ...pulumi.InvokeOption) (*LookupVirtualMachineResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVirtualMachineResult
	err := ctx.Invoke("esxi-native:index:getVirtualMachine", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return rv.Defaults(), nil
}

type LookupVirtualMachineArgs struct {
	// Virtual Machine Name to get details of
	Name string `pulumi:"name"`
}

type LookupVirtualMachineResult struct {
	// VM boot disk size. Will expand boot disk to this size.
	BootDiskSize *int `pulumi:"bootDiskSize"`
	// VM boot disk type. thin, zeroedthick, eagerzeroedthick
	BootDiskType *DiskType `pulumi:"bootDiskType"`
	// Boot type('efi' is boot uefi mode)
	BootFirmware *BootFirmwareType `pulumi:"bootFirmware"`
	// esxi diskstore for boot disk.
	DiskStore *string `pulumi:"diskStore"`
	// esxi vm id.
	Id *string `pulumi:"id"`
	// pass data to VM
	Info []KeyValuePair `pulumi:"info"`
	// The IP address reported by VMWare tools.
	IpAddress *string `pulumi:"ipAddress"`
	// VM memory size.
	MemSize *int `pulumi:"memSize"`
	// esxi vm name.
	Name *string `pulumi:"name"`
	// VM network interfaces.
	NetworkInterfaces []NetworkInterface `pulumi:"networkInterfaces"`
	// VM memory size.
	Notes *string `pulumi:"notes"`
	// VM number of virtual cpus.
	NumVCpus *int `pulumi:"numVCpus"`
	// VM OS type.
	Os *string `pulumi:"os"`
	// VM power state.
	Power *string `pulumi:"power"`
	// Resource pool name to place vm.
	ResourcePoolName *string `pulumi:"resourcePoolName"`
	// The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
	ShutdownTimeout *int `pulumi:"shutdownTimeout"`
	// The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
	StartupTimeout *int `pulumi:"startupTimeout"`
	// VM virtual disks.
	VirtualDisks []VMVirtualDisk `pulumi:"virtualDisks"`
	// VM Virtual HW version.
	VirtualHWVer *int `pulumi:"virtualHWVer"`
}

// Defaults sets the appropriate defaults for LookupVirtualMachineResult
func (val *LookupVirtualMachineResult) Defaults() *LookupVirtualMachineResult {
	if val == nil {
		return nil
	}
	tmp := *val
	if tmp.ShutdownTimeout == nil {
		shutdownTimeout_ := 600
		tmp.ShutdownTimeout = &shutdownTimeout_
	}
	if tmp.StartupTimeout == nil {
		startupTimeout_ := 600
		tmp.StartupTimeout = &startupTimeout_
	}
	return &tmp
}

func LookupVirtualMachineOutput(ctx *pulumi.Context, args LookupVirtualMachineOutputArgs, opts ...pulumi.InvokeOption) LookupVirtualMachineResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVirtualMachineResult, error) {
			args := v.(LookupVirtualMachineArgs)
			r, err := LookupVirtualMachine(ctx, &args, opts...)
			var s LookupVirtualMachineResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVirtualMachineResultOutput)
}

type LookupVirtualMachineOutputArgs struct {
	// Virtual Machine Name to get details of
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupVirtualMachineOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineArgs)(nil)).Elem()
}

type LookupVirtualMachineResultOutput struct{ *pulumi.OutputState }

func (LookupVirtualMachineResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVirtualMachineResult)(nil)).Elem()
}

func (o LookupVirtualMachineResultOutput) ToLookupVirtualMachineResultOutput() LookupVirtualMachineResultOutput {
	return o
}

func (o LookupVirtualMachineResultOutput) ToLookupVirtualMachineResultOutputWithContext(ctx context.Context) LookupVirtualMachineResultOutput {
	return o
}

// VM boot disk size. Will expand boot disk to this size.
func (o LookupVirtualMachineResultOutput) BootDiskSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *int { return v.BootDiskSize }).(pulumi.IntPtrOutput)
}

// VM boot disk type. thin, zeroedthick, eagerzeroedthick
func (o LookupVirtualMachineResultOutput) BootDiskType() DiskTypePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *DiskType { return v.BootDiskType }).(DiskTypePtrOutput)
}

// Boot type('efi' is boot uefi mode)
func (o LookupVirtualMachineResultOutput) BootFirmware() BootFirmwareTypePtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *BootFirmwareType { return v.BootFirmware }).(BootFirmwareTypePtrOutput)
}

// esxi diskstore for boot disk.
func (o LookupVirtualMachineResultOutput) DiskStore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.DiskStore }).(pulumi.StringPtrOutput)
}

// esxi vm id.
func (o LookupVirtualMachineResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// pass data to VM
func (o LookupVirtualMachineResultOutput) Info() KeyValuePairArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) []KeyValuePair { return v.Info }).(KeyValuePairArrayOutput)
}

// The IP address reported by VMWare tools.
func (o LookupVirtualMachineResultOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// VM memory size.
func (o LookupVirtualMachineResultOutput) MemSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *int { return v.MemSize }).(pulumi.IntPtrOutput)
}

// esxi vm name.
func (o LookupVirtualMachineResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// VM network interfaces.
func (o LookupVirtualMachineResultOutput) NetworkInterfaces() NetworkInterfaceArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) []NetworkInterface { return v.NetworkInterfaces }).(NetworkInterfaceArrayOutput)
}

// VM memory size.
func (o LookupVirtualMachineResultOutput) Notes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.Notes }).(pulumi.StringPtrOutput)
}

// VM number of virtual cpus.
func (o LookupVirtualMachineResultOutput) NumVCpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *int { return v.NumVCpus }).(pulumi.IntPtrOutput)
}

// VM OS type.
func (o LookupVirtualMachineResultOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.Os }).(pulumi.StringPtrOutput)
}

// VM power state.
func (o LookupVirtualMachineResultOutput) Power() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.Power }).(pulumi.StringPtrOutput)
}

// Resource pool name to place vm.
func (o LookupVirtualMachineResultOutput) ResourcePoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *string { return v.ResourcePoolName }).(pulumi.StringPtrOutput)
}

// The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
func (o LookupVirtualMachineResultOutput) ShutdownTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *int { return v.ShutdownTimeout }).(pulumi.IntPtrOutput)
}

// The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
func (o LookupVirtualMachineResultOutput) StartupTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *int { return v.StartupTimeout }).(pulumi.IntPtrOutput)
}

// VM virtual disks.
func (o LookupVirtualMachineResultOutput) VirtualDisks() VMVirtualDiskArrayOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) []VMVirtualDisk { return v.VirtualDisks }).(VMVirtualDiskArrayOutput)
}

// VM Virtual HW version.
func (o LookupVirtualMachineResultOutput) VirtualHWVer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupVirtualMachineResult) *int { return v.VirtualHWVer }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVirtualMachineResultOutput{})
}
