// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esxi

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-esxi-native/sdk/go/esxi/internal"
)

type VirtualDisk struct {
	pulumi.CustomResourceState

	// Disk directory.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// Disk Store.
	DiskStore pulumi.StringOutput `pulumi:"diskStore"`
	// Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
	DiskType DiskTypeOutput `pulumi:"diskType"`
	// Virtual Disk Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Virtual Disk size in GB.
	Size pulumi.IntPtrOutput `pulumi:"size"`
}

// NewVirtualDisk registers a new resource with the given unique name, arguments, and options.
func NewVirtualDisk(ctx *pulumi.Context,
	name string, args *VirtualDiskArgs, opts ...pulumi.ResourceOption) (*VirtualDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Directory == nil {
		return nil, errors.New("invalid value for required argument 'Directory'")
	}
	if args.DiskStore == nil {
		return nil, errors.New("invalid value for required argument 'DiskStore'")
	}
	if args.DiskType == nil {
		args.DiskType = DiskType("thin")
	}
	if args.Size == nil {
		args.Size = pulumi.IntPtr(1)
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualDisk
	err := ctx.RegisterResource("esxi-native:index:VirtualDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualDisk gets an existing VirtualDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualDiskState, opts ...pulumi.ResourceOption) (*VirtualDisk, error) {
	var resource VirtualDisk
	err := ctx.ReadResource("esxi-native:index:VirtualDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualDisk resources.
type virtualDiskState struct {
}

type VirtualDiskState struct {
}

func (VirtualDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualDiskState)(nil)).Elem()
}

type virtualDiskArgs struct {
	// Disk directory.
	Directory string `pulumi:"directory"`
	// Disk Store.
	DiskStore string `pulumi:"diskStore"`
	// Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
	DiskType DiskType `pulumi:"diskType"`
	// Virtual Disk Name.
	Name *string `pulumi:"name"`
	// Virtual Disk size in GB.
	Size *int `pulumi:"size"`
}

// The set of arguments for constructing a VirtualDisk resource.
type VirtualDiskArgs struct {
	// Disk directory.
	Directory pulumi.StringInput
	// Disk Store.
	DiskStore pulumi.StringInput
	// Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
	DiskType DiskTypeInput
	// Virtual Disk Name.
	Name pulumi.StringPtrInput
	// Virtual Disk size in GB.
	Size pulumi.IntPtrInput
}

func (VirtualDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualDiskArgs)(nil)).Elem()
}

type VirtualDiskInput interface {
	pulumi.Input

	ToVirtualDiskOutput() VirtualDiskOutput
	ToVirtualDiskOutputWithContext(ctx context.Context) VirtualDiskOutput
}

func (*VirtualDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDisk)(nil)).Elem()
}

func (i *VirtualDisk) ToVirtualDiskOutput() VirtualDiskOutput {
	return i.ToVirtualDiskOutputWithContext(context.Background())
}

func (i *VirtualDisk) ToVirtualDiskOutputWithContext(ctx context.Context) VirtualDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDiskOutput)
}

// VirtualDiskArrayInput is an input type that accepts VirtualDiskArray and VirtualDiskArrayOutput values.
// You can construct a concrete instance of `VirtualDiskArrayInput` via:
//
//	VirtualDiskArray{ VirtualDiskArgs{...} }
type VirtualDiskArrayInput interface {
	pulumi.Input

	ToVirtualDiskArrayOutput() VirtualDiskArrayOutput
	ToVirtualDiskArrayOutputWithContext(context.Context) VirtualDiskArrayOutput
}

type VirtualDiskArray []VirtualDiskInput

func (VirtualDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualDisk)(nil)).Elem()
}

func (i VirtualDiskArray) ToVirtualDiskArrayOutput() VirtualDiskArrayOutput {
	return i.ToVirtualDiskArrayOutputWithContext(context.Background())
}

func (i VirtualDiskArray) ToVirtualDiskArrayOutputWithContext(ctx context.Context) VirtualDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDiskArrayOutput)
}

// VirtualDiskMapInput is an input type that accepts VirtualDiskMap and VirtualDiskMapOutput values.
// You can construct a concrete instance of `VirtualDiskMapInput` via:
//
//	VirtualDiskMap{ "key": VirtualDiskArgs{...} }
type VirtualDiskMapInput interface {
	pulumi.Input

	ToVirtualDiskMapOutput() VirtualDiskMapOutput
	ToVirtualDiskMapOutputWithContext(context.Context) VirtualDiskMapOutput
}

type VirtualDiskMap map[string]VirtualDiskInput

func (VirtualDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualDisk)(nil)).Elem()
}

func (i VirtualDiskMap) ToVirtualDiskMapOutput() VirtualDiskMapOutput {
	return i.ToVirtualDiskMapOutputWithContext(context.Background())
}

func (i VirtualDiskMap) ToVirtualDiskMapOutputWithContext(ctx context.Context) VirtualDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDiskMapOutput)
}

type VirtualDiskOutput struct{ *pulumi.OutputState }

func (VirtualDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualDisk)(nil)).Elem()
}

func (o VirtualDiskOutput) ToVirtualDiskOutput() VirtualDiskOutput {
	return o
}

func (o VirtualDiskOutput) ToVirtualDiskOutputWithContext(ctx context.Context) VirtualDiskOutput {
	return o
}

// Disk directory.
func (o VirtualDiskOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualDisk) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// Disk Store.
func (o VirtualDiskOutput) DiskStore() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualDisk) pulumi.StringOutput { return v.DiskStore }).(pulumi.StringOutput)
}

// Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
func (o VirtualDiskOutput) DiskType() DiskTypeOutput {
	return o.ApplyT(func(v *VirtualDisk) DiskTypeOutput { return v.DiskType }).(DiskTypeOutput)
}

// Virtual Disk Name.
func (o VirtualDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualDisk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Virtual Disk size in GB.
func (o VirtualDiskOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VirtualDisk) pulumi.IntPtrOutput { return v.Size }).(pulumi.IntPtrOutput)
}

type VirtualDiskArrayOutput struct{ *pulumi.OutputState }

func (VirtualDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualDisk)(nil)).Elem()
}

func (o VirtualDiskArrayOutput) ToVirtualDiskArrayOutput() VirtualDiskArrayOutput {
	return o
}

func (o VirtualDiskArrayOutput) ToVirtualDiskArrayOutputWithContext(ctx context.Context) VirtualDiskArrayOutput {
	return o
}

func (o VirtualDiskArrayOutput) Index(i pulumi.IntInput) VirtualDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualDisk {
		return vs[0].([]*VirtualDisk)[vs[1].(int)]
	}).(VirtualDiskOutput)
}

type VirtualDiskMapOutput struct{ *pulumi.OutputState }

func (VirtualDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualDisk)(nil)).Elem()
}

func (o VirtualDiskMapOutput) ToVirtualDiskMapOutput() VirtualDiskMapOutput {
	return o
}

func (o VirtualDiskMapOutput) ToVirtualDiskMapOutputWithContext(ctx context.Context) VirtualDiskMapOutput {
	return o
}

func (o VirtualDiskMapOutput) MapIndex(k pulumi.StringInput) VirtualDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualDisk {
		return vs[0].(map[string]*VirtualDisk)[vs[1].(string)]
	}).(VirtualDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualDiskInput)(nil)).Elem(), &VirtualDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualDiskArrayInput)(nil)).Elem(), VirtualDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualDiskMapInput)(nil)).Elem(), VirtualDiskMap{})
	pulumi.RegisterOutputType(VirtualDiskOutput{})
	pulumi.RegisterOutputType(VirtualDiskArrayOutput{})
	pulumi.RegisterOutputType(VirtualDiskMapOutput{})
}
