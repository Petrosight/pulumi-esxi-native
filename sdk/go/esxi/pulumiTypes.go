// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esxi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ConfigItem struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ConfigItemInput is an input type that accepts ConfigItemArgs and ConfigItemOutput values.
// You can construct a concrete instance of `ConfigItemInput` via:
//
//          ConfigItemArgs{...}
type ConfigItemInput interface {
	pulumi.Input

	ToConfigItemOutput() ConfigItemOutput
	ToConfigItemOutputWithContext(context.Context) ConfigItemOutput
}

type ConfigItemArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ConfigItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigItem)(nil)).Elem()
}

func (i ConfigItemArgs) ToConfigItemOutput() ConfigItemOutput {
	return i.ToConfigItemOutputWithContext(context.Background())
}

func (i ConfigItemArgs) ToConfigItemOutputWithContext(ctx context.Context) ConfigItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigItemOutput)
}

// ConfigItemArrayInput is an input type that accepts ConfigItemArray and ConfigItemArrayOutput values.
// You can construct a concrete instance of `ConfigItemArrayInput` via:
//
//          ConfigItemArray{ ConfigItemArgs{...} }
type ConfigItemArrayInput interface {
	pulumi.Input

	ToConfigItemArrayOutput() ConfigItemArrayOutput
	ToConfigItemArrayOutputWithContext(context.Context) ConfigItemArrayOutput
}

type ConfigItemArray []ConfigItemInput

func (ConfigItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigItem)(nil)).Elem()
}

func (i ConfigItemArray) ToConfigItemArrayOutput() ConfigItemArrayOutput {
	return i.ToConfigItemArrayOutputWithContext(context.Background())
}

func (i ConfigItemArray) ToConfigItemArrayOutputWithContext(ctx context.Context) ConfigItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigItemArrayOutput)
}

type ConfigItemOutput struct{ *pulumi.OutputState }

func (ConfigItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigItem)(nil)).Elem()
}

func (o ConfigItemOutput) ToConfigItemOutput() ConfigItemOutput {
	return o
}

func (o ConfigItemOutput) ToConfigItemOutputWithContext(ctx context.Context) ConfigItemOutput {
	return o
}

func (o ConfigItemOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigItem) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ConfigItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConfigItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ConfigItemArrayOutput struct{ *pulumi.OutputState }

func (ConfigItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConfigItem)(nil)).Elem()
}

func (o ConfigItemArrayOutput) ToConfigItemArrayOutput() ConfigItemArrayOutput {
	return o
}

func (o ConfigItemArrayOutput) ToConfigItemArrayOutputWithContext(ctx context.Context) ConfigItemArrayOutput {
	return o
}

func (o ConfigItemArrayOutput) Index(i pulumi.IntInput) ConfigItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConfigItem {
		return vs[0].([]ConfigItem)[vs[1].(int)]
	}).(ConfigItemOutput)
}

type NetworkInterface struct {
	MacAddress     *string `pulumi:"macAddress"`
	NicType        *string `pulumi:"nicType"`
	VirtualNetwork *string `pulumi:"virtualNetwork"`
}

// NetworkInterfaceInput is an input type that accepts NetworkInterfaceArgs and NetworkInterfaceOutput values.
// You can construct a concrete instance of `NetworkInterfaceInput` via:
//
//          NetworkInterfaceArgs{...}
type NetworkInterfaceInput interface {
	pulumi.Input

	ToNetworkInterfaceOutput() NetworkInterfaceOutput
	ToNetworkInterfaceOutputWithContext(context.Context) NetworkInterfaceOutput
}

type NetworkInterfaceArgs struct {
	MacAddress     pulumi.StringPtrInput `pulumi:"macAddress"`
	NicType        pulumi.StringPtrInput `pulumi:"nicType"`
	VirtualNetwork pulumi.StringPtrInput `pulumi:"virtualNetwork"`
}

func (NetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return i.ToNetworkInterfaceOutputWithContext(context.Background())
}

func (i NetworkInterfaceArgs) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceOutput)
}

// NetworkInterfaceArrayInput is an input type that accepts NetworkInterfaceArray and NetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceArrayInput` via:
//
//          NetworkInterfaceArray{ NetworkInterfaceArgs{...} }
type NetworkInterfaceArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput
	ToNetworkInterfaceArrayOutputWithContext(context.Context) NetworkInterfaceArrayOutput
}

type NetworkInterfaceArray []NetworkInterfaceInput

func (NetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return i.ToNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceArray) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceArrayOutput)
}

type NetworkInterfaceOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutput() NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) ToNetworkInterfaceOutputWithContext(ctx context.Context) NetworkInterfaceOutput {
	return o
}

func (o NetworkInterfaceOutput) MacAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.MacAddress }).(pulumi.StringPtrOutput)
}

func (o NetworkInterfaceOutput) NicType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.NicType }).(pulumi.StringPtrOutput)
}

func (o NetworkInterfaceOutput) VirtualNetwork() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkInterface) *string { return v.VirtualNetwork }).(pulumi.StringPtrOutput)
}

type NetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkInterface)(nil)).Elem()
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutput() NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) ToNetworkInterfaceArrayOutputWithContext(ctx context.Context) NetworkInterfaceArrayOutput {
	return o
}

func (o NetworkInterfaceArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkInterface {
		return vs[0].([]NetworkInterface)[vs[1].(int)]
	}).(NetworkInterfaceOutput)
}

type VirtualDisk struct {
	// SCSI_Ctrl:SCSI_id.    Range  '0:1' to '0:15'.   SCSI_id 7 is not allowed.
	Slot          *string `pulumi:"slot"`
	VirtualDiskId *string `pulumi:"virtualDiskId"`
}

// VirtualDiskInput is an input type that accepts VirtualDiskArgs and VirtualDiskOutput values.
// You can construct a concrete instance of `VirtualDiskInput` via:
//
//          VirtualDiskArgs{...}
type VirtualDiskInput interface {
	pulumi.Input

	ToVirtualDiskOutput() VirtualDiskOutput
	ToVirtualDiskOutputWithContext(context.Context) VirtualDiskOutput
}

type VirtualDiskArgs struct {
	// SCSI_Ctrl:SCSI_id.    Range  '0:1' to '0:15'.   SCSI_id 7 is not allowed.
	Slot          pulumi.StringPtrInput `pulumi:"slot"`
	VirtualDiskId pulumi.StringPtrInput `pulumi:"virtualDiskId"`
}

func (VirtualDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDisk)(nil)).Elem()
}

func (i VirtualDiskArgs) ToVirtualDiskOutput() VirtualDiskOutput {
	return i.ToVirtualDiskOutputWithContext(context.Background())
}

func (i VirtualDiskArgs) ToVirtualDiskOutputWithContext(ctx context.Context) VirtualDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDiskOutput)
}

// VirtualDiskArrayInput is an input type that accepts VirtualDiskArray and VirtualDiskArrayOutput values.
// You can construct a concrete instance of `VirtualDiskArrayInput` via:
//
//          VirtualDiskArray{ VirtualDiskArgs{...} }
type VirtualDiskArrayInput interface {
	pulumi.Input

	ToVirtualDiskArrayOutput() VirtualDiskArrayOutput
	ToVirtualDiskArrayOutputWithContext(context.Context) VirtualDiskArrayOutput
}

type VirtualDiskArray []VirtualDiskInput

func (VirtualDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDisk)(nil)).Elem()
}

func (i VirtualDiskArray) ToVirtualDiskArrayOutput() VirtualDiskArrayOutput {
	return i.ToVirtualDiskArrayOutputWithContext(context.Background())
}

func (i VirtualDiskArray) ToVirtualDiskArrayOutputWithContext(ctx context.Context) VirtualDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualDiskArrayOutput)
}

type VirtualDiskOutput struct{ *pulumi.OutputState }

func (VirtualDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualDisk)(nil)).Elem()
}

func (o VirtualDiskOutput) ToVirtualDiskOutput() VirtualDiskOutput {
	return o
}

func (o VirtualDiskOutput) ToVirtualDiskOutputWithContext(ctx context.Context) VirtualDiskOutput {
	return o
}

// SCSI_Ctrl:SCSI_id.    Range  '0:1' to '0:15'.   SCSI_id 7 is not allowed.
func (o VirtualDiskOutput) Slot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDisk) *string { return v.Slot }).(pulumi.StringPtrOutput)
}

func (o VirtualDiskOutput) VirtualDiskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VirtualDisk) *string { return v.VirtualDiskId }).(pulumi.StringPtrOutput)
}

type VirtualDiskArrayOutput struct{ *pulumi.OutputState }

func (VirtualDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualDisk)(nil)).Elem()
}

func (o VirtualDiskArrayOutput) ToVirtualDiskArrayOutput() VirtualDiskArrayOutput {
	return o
}

func (o VirtualDiskArrayOutput) ToVirtualDiskArrayOutputWithContext(ctx context.Context) VirtualDiskArrayOutput {
	return o
}

func (o VirtualDiskArrayOutput) Index(i pulumi.IntInput) VirtualDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualDisk {
		return vs[0].([]VirtualDisk)[vs[1].(int)]
	}).(VirtualDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigItemInput)(nil)).Elem(), ConfigItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigItemArrayInput)(nil)).Elem(), ConfigItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceInput)(nil)).Elem(), NetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceArrayInput)(nil)).Elem(), NetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualDiskInput)(nil)).Elem(), VirtualDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualDiskArrayInput)(nil)).Elem(), VirtualDiskArray{})
	pulumi.RegisterOutputType(ConfigItemOutput{})
	pulumi.RegisterOutputType(ConfigItemArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(VirtualDiskOutput{})
	pulumi.RegisterOutputType(VirtualDiskArrayOutput{})
}
