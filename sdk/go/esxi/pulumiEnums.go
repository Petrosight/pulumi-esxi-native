// Code generated by pulumigen DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package esxi

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type BootFirmwareType string

const (
	BootFirmwareTypeBIOS = BootFirmwareType("bios")
	BootFirmwareTypeEFI  = BootFirmwareType("efi")
)

func (BootFirmwareType) ElementType() reflect.Type {
	return reflect.TypeOf((*BootFirmwareType)(nil)).Elem()
}

func (e BootFirmwareType) ToBootFirmwareTypeOutput() BootFirmwareTypeOutput {
	return pulumi.ToOutput(e).(BootFirmwareTypeOutput)
}

func (e BootFirmwareType) ToBootFirmwareTypeOutputWithContext(ctx context.Context) BootFirmwareTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(BootFirmwareTypeOutput)
}

func (e BootFirmwareType) ToBootFirmwareTypePtrOutput() BootFirmwareTypePtrOutput {
	return e.ToBootFirmwareTypePtrOutputWithContext(context.Background())
}

func (e BootFirmwareType) ToBootFirmwareTypePtrOutputWithContext(ctx context.Context) BootFirmwareTypePtrOutput {
	return BootFirmwareType(e).ToBootFirmwareTypeOutputWithContext(ctx).ToBootFirmwareTypePtrOutputWithContext(ctx)
}

func (e BootFirmwareType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e BootFirmwareType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e BootFirmwareType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e BootFirmwareType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type BootFirmwareTypeOutput struct{ *pulumi.OutputState }

func (BootFirmwareTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BootFirmwareType)(nil)).Elem()
}

func (o BootFirmwareTypeOutput) ToBootFirmwareTypeOutput() BootFirmwareTypeOutput {
	return o
}

func (o BootFirmwareTypeOutput) ToBootFirmwareTypeOutputWithContext(ctx context.Context) BootFirmwareTypeOutput {
	return o
}

func (o BootFirmwareTypeOutput) ToBootFirmwareTypePtrOutput() BootFirmwareTypePtrOutput {
	return o.ToBootFirmwareTypePtrOutputWithContext(context.Background())
}

func (o BootFirmwareTypeOutput) ToBootFirmwareTypePtrOutputWithContext(ctx context.Context) BootFirmwareTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v BootFirmwareType) *BootFirmwareType {
		return &v
	}).(BootFirmwareTypePtrOutput)
}

func (o BootFirmwareTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o BootFirmwareTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BootFirmwareType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o BootFirmwareTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BootFirmwareTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e BootFirmwareType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type BootFirmwareTypePtrOutput struct{ *pulumi.OutputState }

func (BootFirmwareTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BootFirmwareType)(nil)).Elem()
}

func (o BootFirmwareTypePtrOutput) ToBootFirmwareTypePtrOutput() BootFirmwareTypePtrOutput {
	return o
}

func (o BootFirmwareTypePtrOutput) ToBootFirmwareTypePtrOutputWithContext(ctx context.Context) BootFirmwareTypePtrOutput {
	return o
}

func (o BootFirmwareTypePtrOutput) Elem() BootFirmwareTypeOutput {
	return o.ApplyT(func(v *BootFirmwareType) BootFirmwareType {
		if v != nil {
			return *v
		}
		var ret BootFirmwareType
		return ret
	}).(BootFirmwareTypeOutput)
}

func (o BootFirmwareTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o BootFirmwareTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *BootFirmwareType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// BootFirmwareTypeInput is an input type that accepts BootFirmwareTypeArgs and BootFirmwareTypeOutput values.
// You can construct a concrete instance of `BootFirmwareTypeInput` via:
//
//	BootFirmwareTypeArgs{...}
type BootFirmwareTypeInput interface {
	pulumi.Input

	ToBootFirmwareTypeOutput() BootFirmwareTypeOutput
	ToBootFirmwareTypeOutputWithContext(context.Context) BootFirmwareTypeOutput
}

var bootFirmwareTypePtrType = reflect.TypeOf((**BootFirmwareType)(nil)).Elem()

type BootFirmwareTypePtrInput interface {
	pulumi.Input

	ToBootFirmwareTypePtrOutput() BootFirmwareTypePtrOutput
	ToBootFirmwareTypePtrOutputWithContext(context.Context) BootFirmwareTypePtrOutput
}

type bootFirmwareTypePtr string

func BootFirmwareTypePtr(v string) BootFirmwareTypePtrInput {
	return (*bootFirmwareTypePtr)(&v)
}

func (*bootFirmwareTypePtr) ElementType() reflect.Type {
	return bootFirmwareTypePtrType
}

func (in *bootFirmwareTypePtr) ToBootFirmwareTypePtrOutput() BootFirmwareTypePtrOutput {
	return pulumi.ToOutput(in).(BootFirmwareTypePtrOutput)
}

func (in *bootFirmwareTypePtr) ToBootFirmwareTypePtrOutputWithContext(ctx context.Context) BootFirmwareTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(BootFirmwareTypePtrOutput)
}

type DiskType string

const (
	DiskTypeThin             = DiskType("thin")
	DiskTypeZeroedThick      = DiskType("zeroedthick")
	DiskTypeEagerZeroedThick = DiskType("eagerzeroedthick")
	DiskTypeUnknown          = DiskType("Unknown")
)

func (DiskType) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskType)(nil)).Elem()
}

func (e DiskType) ToDiskTypeOutput() DiskTypeOutput {
	return pulumi.ToOutput(e).(DiskTypeOutput)
}

func (e DiskType) ToDiskTypeOutputWithContext(ctx context.Context) DiskTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(DiskTypeOutput)
}

func (e DiskType) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return e.ToDiskTypePtrOutputWithContext(context.Background())
}

func (e DiskType) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return DiskType(e).ToDiskTypeOutputWithContext(ctx).ToDiskTypePtrOutputWithContext(ctx)
}

func (e DiskType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e DiskType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e DiskType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type DiskTypeOutput struct{ *pulumi.OutputState }

func (DiskTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DiskType)(nil)).Elem()
}

func (o DiskTypeOutput) ToDiskTypeOutput() DiskTypeOutput {
	return o
}

func (o DiskTypeOutput) ToDiskTypeOutputWithContext(ctx context.Context) DiskTypeOutput {
	return o
}

func (o DiskTypeOutput) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return o.ToDiskTypePtrOutputWithContext(context.Background())
}

func (o DiskTypeOutput) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DiskType) *DiskType {
		return &v
	}).(DiskTypePtrOutput)
}

func (o DiskTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o DiskTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o DiskTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e DiskType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type DiskTypePtrOutput struct{ *pulumi.OutputState }

func (DiskTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DiskType)(nil)).Elem()
}

func (o DiskTypePtrOutput) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return o
}

func (o DiskTypePtrOutput) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return o
}

func (o DiskTypePtrOutput) Elem() DiskTypeOutput {
	return o.ApplyT(func(v *DiskType) DiskType {
		if v != nil {
			return *v
		}
		var ret DiskType
		return ret
	}).(DiskTypeOutput)
}

func (o DiskTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o DiskTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *DiskType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// DiskTypeInput is an input type that accepts DiskTypeArgs and DiskTypeOutput values.
// You can construct a concrete instance of `DiskTypeInput` via:
//
//	DiskTypeArgs{...}
type DiskTypeInput interface {
	pulumi.Input

	ToDiskTypeOutput() DiskTypeOutput
	ToDiskTypeOutputWithContext(context.Context) DiskTypeOutput
}

var diskTypePtrType = reflect.TypeOf((**DiskType)(nil)).Elem()

type DiskTypePtrInput interface {
	pulumi.Input

	ToDiskTypePtrOutput() DiskTypePtrOutput
	ToDiskTypePtrOutputWithContext(context.Context) DiskTypePtrOutput
}

type diskTypePtr string

func DiskTypePtr(v string) DiskTypePtrInput {
	return (*diskTypePtr)(&v)
}

func (*diskTypePtr) ElementType() reflect.Type {
	return diskTypePtrType
}

func (in *diskTypePtr) ToDiskTypePtrOutput() DiskTypePtrOutput {
	return pulumi.ToOutput(in).(DiskTypePtrOutput)
}

func (in *diskTypePtr) ToDiskTypePtrOutputWithContext(ctx context.Context) DiskTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(DiskTypePtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BootFirmwareTypeInput)(nil)).Elem(), BootFirmwareType("bios"))
	pulumi.RegisterInputType(reflect.TypeOf((*BootFirmwareTypePtrInput)(nil)).Elem(), BootFirmwareType("bios"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiskTypeInput)(nil)).Elem(), DiskType("thin"))
	pulumi.RegisterInputType(reflect.TypeOf((*DiskTypePtrInput)(nil)).Elem(), DiskType("thin"))
	pulumi.RegisterOutputType(BootFirmwareTypeOutput{})
	pulumi.RegisterOutputType(BootFirmwareTypePtrOutput{})
	pulumi.RegisterOutputType(DiskTypeOutput{})
	pulumi.RegisterOutputType(DiskTypePtrOutput{})
}
