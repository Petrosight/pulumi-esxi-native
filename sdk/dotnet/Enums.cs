// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.EsxiNative
{
    [EnumType]
    public readonly struct BootDiskType : IEquatable<BootDiskType>
    {
        private readonly string _value;

        private BootDiskType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BootDiskType Thin { get; } = new BootDiskType("thin");
        public static BootDiskType ZeroedThick { get; } = new BootDiskType("zeroedthick");
        public static BootDiskType EagerZeroedThick { get; } = new BootDiskType("eagerzeroedthick");

        public static bool operator ==(BootDiskType left, BootDiskType right) => left.Equals(right);
        public static bool operator !=(BootDiskType left, BootDiskType right) => !left.Equals(right);

        public static explicit operator string(BootDiskType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BootDiskType other && Equals(other);
        public bool Equals(BootDiskType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct BootFirmwareType : IEquatable<BootFirmwareType>
    {
        private readonly string _value;

        private BootFirmwareType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static BootFirmwareType BIOS { get; } = new BootFirmwareType("bios");
        public static BootFirmwareType EFI { get; } = new BootFirmwareType("efi");

        public static bool operator ==(BootFirmwareType left, BootFirmwareType right) => left.Equals(right);
        public static bool operator !=(BootFirmwareType left, BootFirmwareType right) => !left.Equals(right);

        public static explicit operator string(BootFirmwareType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is BootFirmwareType other && Equals(other);
        public bool Equals(BootFirmwareType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
