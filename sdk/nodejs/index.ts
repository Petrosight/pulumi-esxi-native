// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetVirtualMachineArgs, GetVirtualMachineResult, GetVirtualMachineOutputArgs } from "./getVirtualMachine";
export const getVirtualMachine: typeof import("./getVirtualMachine").getVirtualMachine = null as any;
export const getVirtualMachineOutput: typeof import("./getVirtualMachine").getVirtualMachineOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachine","getVirtualMachineOutput"], () => require("./getVirtualMachine"));

export { GetVirtualMachineByIdArgs, GetVirtualMachineByIdResult, GetVirtualMachineByIdOutputArgs } from "./getVirtualMachineById";
export const getVirtualMachineById: typeof import("./getVirtualMachineById").getVirtualMachineById = null as any;
export const getVirtualMachineByIdOutput: typeof import("./getVirtualMachineById").getVirtualMachineByIdOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualMachineById","getVirtualMachineByIdOutput"], () => require("./getVirtualMachineById"));

export { PortGroupArgs } from "./portGroup";
export type PortGroup = import("./portGroup").PortGroup;
export const PortGroup: typeof import("./portGroup").PortGroup = null as any;
utilities.lazyLoad(exports, ["PortGroup"], () => require("./portGroup"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourcePoolArgs } from "./resourcePool";
export type ResourcePool = import("./resourcePool").ResourcePool;
export const ResourcePool: typeof import("./resourcePool").ResourcePool = null as any;
utilities.lazyLoad(exports, ["ResourcePool"], () => require("./resourcePool"));

export { VirtualDiskArgs } from "./virtualDisk";
export type VirtualDisk = import("./virtualDisk").VirtualDisk;
export const VirtualDisk: typeof import("./virtualDisk").VirtualDisk = null as any;
utilities.lazyLoad(exports, ["VirtualDisk"], () => require("./virtualDisk"));

export { VirtualMachineArgs } from "./virtualMachine";
export type VirtualMachine = import("./virtualMachine").VirtualMachine;
export const VirtualMachine: typeof import("./virtualMachine").VirtualMachine = null as any;
utilities.lazyLoad(exports, ["VirtualMachine"], () => require("./virtualMachine"));

export { VirtualSwitchArgs } from "./virtualSwitch";
export type VirtualSwitch = import("./virtualSwitch").VirtualSwitch;
export const VirtualSwitch: typeof import("./virtualSwitch").VirtualSwitch = null as any;
utilities.lazyLoad(exports, ["VirtualSwitch"], () => require("./virtualSwitch"));


// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "esxi-native:index:PortGroup":
                return new PortGroup(name, <any>undefined, { urn })
            case "esxi-native:index:ResourcePool":
                return new ResourcePool(name, <any>undefined, { urn })
            case "esxi-native:index:VirtualDisk":
                return new VirtualDisk(name, <any>undefined, { urn })
            case "esxi-native:index:VirtualMachine":
                return new VirtualMachine(name, <any>undefined, { urn })
            case "esxi-native:index:VirtualSwitch":
                return new VirtualSwitch(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("esxi-native", "index", _module)
pulumi.runtime.registerResourcePackage("esxi-native", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:esxi-native") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
