// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

export function getVirtualMachineById(args: GetVirtualMachineByIdArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualMachineByIdResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("esxi-native:index:getVirtualMachineById", {
        "id": args.id,
    }, opts);
}

export interface GetVirtualMachineByIdArgs {
    /**
     * Virtual Machine Id to get details of
     */
    id: string;
}

export interface GetVirtualMachineByIdResult {
    /**
     * VM boot disk size. Will expand boot disk to this size.
     */
    readonly bootDiskSize?: string;
    /**
     * VM boot disk type. thin, zeroedthick, eagerzeroedthick
     */
    readonly bootDiskType?: enums.DiskType;
    /**
     * Boot type('efi' is boot uefi mode)
     */
    readonly bootFirmware?: enums.BootFirmwareType;
    /**
     * esxi diskstore for boot disk.
     */
    readonly diskStore?: string;
    /**
     * esxi vm id.
     */
    readonly id?: string;
    /**
     * pass data to VM
     */
    readonly info?: outputs.KeyValuePair[];
    /**
     * The IP address reported by VMWare tools.
     */
    readonly ipAddress?: string;
    /**
     * VM memory size.
     */
    readonly memSize?: string;
    /**
     * esxi vm name.
     */
    readonly name?: string;
    /**
     * VM network interfaces.
     */
    readonly networkInterfaces?: outputs.NetworkInterface[];
    /**
     * VM memory size.
     */
    readonly notes?: string;
    /**
     * VM number of virtual cpus.
     */
    readonly numVCpus?: string;
    /**
     * VM OS type.
     */
    readonly os?: string;
    /**
     * VM power state.
     */
    readonly power?: string;
    /**
     * Resource pool name to place vm.
     */
    readonly resourcePoolName?: string;
    /**
     * The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
     */
    readonly shutdownTimeout?: number;
    /**
     * The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
     */
    readonly startupTimeout?: number;
    /**
     * VM virtual disks.
     */
    readonly virtualDisks?: outputs.VMVirtualDisk[];
    /**
     * VM Virtual HW version.
     */
    readonly virtualHWVer?: string;
}

export function getVirtualMachineByIdOutput(args: GetVirtualMachineByIdOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualMachineByIdResult> {
    return pulumi.output(args).apply(a => getVirtualMachineById(a, opts))
}

export interface GetVirtualMachineByIdOutputArgs {
    /**
     * Virtual Machine Id to get details of
     */
    id: pulumi.Input<string>;
}
